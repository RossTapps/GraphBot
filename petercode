import boom from 'boom';
import uuidv4 from 'uuid/v4'

import gremlin from '../../../connectors/gremlin';
import lewis from '../../../connectors/lewis';

const conversationContexts = {};

const intentHandler = async (convId,intent, entities) => {
  switch(intent) {
    case "FindRecipebyIngredient":
      conversationContexts[convId]['lastIntent'] = intent;
      if(entities.length > 0) {
        const recipes = await gremlin.getRecipesByIngredients(entities[0].entity); //TODO only 1 at the mo

        // TODO fastest path

        return [`I have found ${recipes.length} recipie(s)`, ...recipes];
      } else {
        return ['Could you add an ingredient?']
      }
    case "None":
      if(conversationContexts[convId]['lastIntent']) {
        return intentHandler(conversationContexts[convId]['lastIntent'], entities);
      } else {
        return ["Sorry I didn't understand"];
      }
  }
};

export const query = async (convId, message) => {
  try {
    if(convId === '') {
      convId = uuidv4();
    }

    if(!conversationContexts[convId]) {
      conversationContexts[convId] = {};
    }

    //get the intent
    const intent  = await lewis.getIntent(message);

    const response = await intentHandler(convId,intent.topScoringIntent.intent, intent.entities);
    return { convId, output: response };

  } catch (err) {
    throw boom.badImplementation('Failed to create knowledge');
  }
};



